### This file was autogenerated by Nexus 0.11.7
### Do not make changes to this file directly


type AggregateToken {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Mutation {
  protected(data: String): Protected
  refresh(token: String): RefreshPayload
  signin(email: String, password: String): SignInPayload
  signup(email: String, password: String, userName: String): SignUpPayload
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Protected {
  data: String
}

type Query {
  token(where: TokenWhereUniqueInput!): Token
  tokens(after: String, before: String, first: Int, last: Int, orderBy: TokenOrderByInput, skip: Int, where: TokenWhereInput): [Token!]!
  tokensConnection(after: String, before: String, first: Int, last: Int, orderBy: TokenOrderByInput, skip: Int, where: TokenWhereInput): TokenConnection!
  user(where: UserWhereUniqueInput!): User
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
  usersConnection(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): UserConnection!
}

type RefreshPayload {
  email: String
  id: String
  userName: String
}

enum Role {
  ADMIN
  DEFAULT_USER
}

type SignInPayload {
  email: String
  id: String
  userName: String
}

type SignUpPayload {
  email: String
  id: String
  userName: String
}

type Token {
  id: ID!
  loginId: String!
  token: String!
  user: User!
}

type TokenConnection {
  aggregate: AggregateToken!
  edges: [TokenEdge!]!
  pageInfo: PageInfo!
}

type TokenEdge {
  cursor: String!
  node: Token!
}

enum TokenOrderByInput {
  id_ASC
  id_DESC
  loginId_ASC
  loginId_DESC
  token_ASC
  token_DESC
}

input TokenWhereInput {
  AND: [TokenWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  loginId: String
  loginId_contains: String
  loginId_ends_with: String
  loginId_gt: String
  loginId_gte: String
  loginId_in: [String!]
  loginId_lt: String
  loginId_lte: String
  loginId_not: String
  loginId_not_contains: String
  loginId_not_ends_with: String
  loginId_not_in: [String!]
  loginId_not_starts_with: String
  loginId_starts_with: String
  token: String
  token_contains: String
  token_ends_with: String
  token_gt: String
  token_gte: String
  token_in: [String!]
  token_lt: String
  token_lte: String
  token_not: String
  token_not_contains: String
  token_not_ends_with: String
  token_not_in: [String!]
  token_not_starts_with: String
  token_starts_with: String
  user: UserWhereInput
}

input TokenWhereUniqueInput {
  id: ID
  loginId: String
  token: String
}

type User {
  email: String!
  id: ID!
  password: String!
  refreshTokens: [Token!]
  userName: String
}

type UserConnection {
  aggregate: AggregateUser!
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type UserEdge {
  cursor: String!
  node: User!
}

enum UserOrderByInput {
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
  userName_ASC
  userName_DESC
}

input UserWhereInput {
  AND: [UserWhereInput!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  password: String
  password_contains: String
  password_ends_with: String
  password_gt: String
  password_gte: String
  password_in: [String!]
  password_lt: String
  password_lte: String
  password_not: String
  password_not_contains: String
  password_not_ends_with: String
  password_not_in: [String!]
  password_not_starts_with: String
  password_starts_with: String
  refreshTokens_some: TokenWhereInput
  role: Role
  role_in: [Role!]
  role_not: Role
  role_not_in: [Role!]
  userName: String
  userName_contains: String
  userName_ends_with: String
  userName_gt: String
  userName_gte: String
  userName_in: [String!]
  userName_lt: String
  userName_lte: String
  userName_not: String
  userName_not_contains: String
  userName_not_ends_with: String
  userName_not_in: [String!]
  userName_not_starts_with: String
  userName_starts_with: String
}

input UserWhereUniqueInput {
  email: String
  id: ID
  userName: String
}
